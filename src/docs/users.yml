securityDefinitions:
  Bearer:
    description: For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header. <br><br>A valid JWT token is generated by the API and retourned as answer of a call to the route /sessions giving a valid user & password.<br><br>
    type: apiKey
    name: Authorization
    in: header
        
definitions:
  User:
    title: User
    type: object
    properties:
      id:
        type: integer
        description: Unique identifier representing a specific user
      email:
        type: string
        description: Email for the user
      password:
        type: string
        description: Password for the user
      phone:
        type: string
        description: Phone of the user
      name:
        type: string
        description: Name of the user
      surname:
        type: string
        description: Surname of the user
      createdAt:
        type: string
        format: date-time
        description: User creation datetime
      updatedAt:
        type: string
        format: date-time
        description: User update datetime
  NewUser:
    title: NewUser
    type: object
    properties:
      email:
        type: string
        description: Email for the user
      password:
        type: string
        description: Password for the user
      phone:
        type: string
        description: Phone of the user
      name:
        type: string
        description: Name of the user
      surname:
        type: string
        description: Surname of the user
  Error:
    title: Error
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  ServerError:
    allOf:
      - $ref: '#/definitions/Error'
      - title: ServerError
  NotFoundError:
    allOf:
      - $ref: '#/definitions/Error'
      - title: NotFoundError
  ValidationError:
    allOf:
      - $ref: '#/definitions/Error'
      - title: ValidationError
      - properties:
          details:
            type: array
            items:
              title: FieldError
              type: object
              properties:
                message:
                  type: string
                param:
                  type: string

/users:
  get:
    summary: List all users
    description: Returns users
    produces:
      - application/json
    tags:
      - Users
    security:
      - Bearer: []
    responses:
      200:
        description: An array of users
        schema:
          title: Users
          type: array
          items:
            $ref: '#/definitions/User'
  post:
    summary: Create a new user
    description: Create an user
    produces:
      - application/json
    tags:
      - Users
    security:
      - Bearer: []
    parameters:
      - name: UserParams
        description: POST params for an user
        in: body
        required: true
        schema:
          $ref: '#/definitions/NewUser'
    responses:
      201:
        description: Newly created user object
        schema:
          title: User
          type: object
          $ref: '#/definitions/User'
      400:
        description: Bad request
        schema:
          $ref: '#/definitions/ValidationError'
      500:
        description: Internal server error
        schema:
          $ref: '#/definitions/ServerError'

/users/{id}:
  get:
    summary: Get an user
    description: Get user information
    produces:
      - application/json
    tags:
      - Users
    security:
      - Bearer: []
    parameters:
      - name: id
        description: Unique identifier of the user
        in: path
        required: true
        type: integer
    responses:
      200:
        description: User object
        schema:
          title: User
          type: object
          $ref: '#/definitions/User'
      404:
        description: User not found
        schema:
          $ref: '#/definitions/NotFoundError'
      500:
        description: Internal server error
        schema:
          $ref: '#/definitions/ServerError'

  put:
    summary: Update an user
    description: Update an user
    produces:
      - application/json
    tags:
      - Users
    security:
      - Bearer: []
    parameters:
      - name: id
        description: Unique identifier of the user
        in: path
        required: true
        type: integer
      - name: UserParams
        description: PUT params for an user
        in: body
        required: true
        schema:
          $ref: '#/definitions/NewUser'
    responses:
      200:
        description: Updated user object
        schema:
          title: UpdatedUser
          type: object
          properties:
            id:
              type: number
              description: Unique identifier representing a specific user
            name:
              type: string
              description: Name of the user
            updatedAt:
              type: string
              format: date-time
              description: Updated user datetime
      400:
        description: Bad request
        schema:
          $ref: '#/definitions/ValidationError'
      404:
        description: User not found
        schema:
          $ref: '#/definitions/NotFoundError'
      500:
        description: Internal server error
        schema:
          $ref: '#/definitions/ServerError'

  delete:
    summary: Delete an user
    description: Delete an user
    produces:
      - application/json
    tags:
      - Users
    security:
      - Bearer: []
    parameters:
      - name: id
        description: Unique identifier of the user
        in: path
        required: true
        type: integer
    responses:
      204:
        description: User deleted (no-content)
      400:
        description: Bad request
        schema:
          $ref: '#/definitions/ValidationError'
      404:
        description: User not found
        schema:
          $ref: '#/definitions/NotFoundError'
      500:
        description: Internal server error
        schema:
          $ref: '#/definitions/ServerError'